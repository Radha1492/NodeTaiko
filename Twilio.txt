Modify cypress.config.js: Add the following code in your cypress.config.js file to create a task for moving the file:

const fs = require('fs');
const path = require('path');

module.exports = {
  e2e: {
    setupNodeEvents(on, config) {
      on('task', {
        moveCsvFile() {
          const srcPath = path.join(__dirname, 'cypress', 'fixtures', 'test-data.csv');
          const archiveDir = path.join(__dirname, 'cypress', 'archive');
          
          // Ensure archive directory exists
          if (!fs.existsSync(archiveDir)) {
            fs.mkdirSync(archiveDir);
          }

          // Generate a unique name for the archived file
          const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
          const destPath = path.join(archiveDir, `test-data-${timestamp}.csv`);

          // Move the file
          return new Promise((resolve, reject) => {
            fs.rename(srcPath, destPath, (err) => {
              if (err) {
                console.error('Error moving file:', err);
                return reject(err);
              }
              console.log('File moved to:', destPath);
              resolve(null);
            });
          });
        },
      });
    },
  },
};


Use the Task in Your Test Case:

Call the task in your test case before the CSV file is generated:
describe('CSV Test Case', () => {
  before(() => {
    cy.task('moveCsvFile');
  });

  it('should generate a new CSV file', () => {
    // Your test logic that generates a new CSV file
  });
});

Option 2: Write a Standalone Helper Function
Alternatively, you can write the file-moving logic as a Node.js helper function and import it where needed.

Create a fileUtils.js File:

Create a helper file under a utils folder or directly in your Cypress project:

const fs = require('fs');
const path = require('path');

function moveCsvFile() {
  const srcPath = path.join(__dirname, '../fixtures/test-data.csv');
  const archiveDir = path.join(__dirname, '../archive');

  // Ensure archive directory exists
  if (!fs.existsSync(archiveDir)) {
    fs.mkdirSync(archiveDir);
  }

  // Generate a unique name for the archived file
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const destPath = path.join(archiveDir, `test-data-${timestamp}.csv`);

  // Move the file
  return new Promise((resolve, reject) => {
    fs.rename(srcPath, destPath, (err) => {
      if (err) {
        console.error('Error moving file:', err);
        return reject(err);
      }
      console.log('File moved to:', destPath);
      resolve(null);
    });
  });
}

module.exports = { moveCsvFile };

const { moveCsvFile } = require('../utils/fileUtils');

describe('CSV Test Case', () => {
  before(() => {
    cy.wrap(moveCsvFile()).then(() => {
      console.log('Old CSV file moved to archive.');
    });
  });

  it('should generate a new CSV file', () => {
    // Your test logic to generate a new CSV
  });
});

####
const fs = require('fs');
const path = require('path');

module.exports = {
  e2e: {
    setupNodeEvents(on, config) {
      on('task', {
        moveFile({ fileName, fileType }) {
          const srcPath = path.join(__dirname, 'cypress', 'fixtures', `${fileName}.${fileType}`);
          const archiveDir = path.join(__dirname, 'cypress', 'archive');

          // Ensure the archive directory exists
          if (!fs.existsSync(archiveDir)) {
            fs.mkdirSync(archiveDir);
          }

          // Check if the file exists
          if (!fs.existsSync(srcPath)) {
            const message = `File "${fileName}.${fileType}" does not exist.`;
            console.warn(message);
            return Promise.resolve(message); // Return message without failing the task
          }

          // Generate a unique name for the archived file
          const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
          const destPath = path.join(archiveDir, `${fileName}-${timestamp}.${fileType}`);

          // Move the file
          return new Promise((resolve, reject) => {
            fs.rename(srcPath, destPath, (err) => {
              if (err) {
                console.error('Error moving file:', err);
                return reject(err);
              }
              const successMessage = `File moved to: ${destPath}`;
              console.log(successMessage);
              resolve(successMessage);
            });
          });
        },
      });
    },
  },
};

describe('Move File Test', () => {
  before(() => {
    cy.task('moveFile', { fileName: 'test-data', fileType: 'csv' }).then((result) => {
      console.log(result); // Logs either the success or "file not found" message
    });
  });

  it('should generate a new CSV file', () => {
    // Your test logic to generate a new CSV file
  });
});


