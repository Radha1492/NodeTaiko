Hereâ€™s the updated cypress.config.js file with console.log added for debugging purposes. This will allow you to see the logging of each step, description, and status in the console, ensuring that the task is being triggered multiple times:
const fs = require('fs');
const path = require('path');
const ExcelJS = require('exceljs');

module.exports = {
  e2e: {
    setupNodeEvents(on, config) {
      on('task', {
        logTestStepToExcel({ step, description, status }) {
          // Logging the task data for debugging
          console.log(`Logging step: ${step}, description: ${description}, status: ${status}`);

          const logFilePath = path.join(__dirname, 'test-steps-log.xlsx');
          let workbook = new ExcelJS.Workbook();

          if (fs.existsSync(logFilePath)) {
            // Load existing workbook
            return workbook.xlsx.readFile(logFilePath).then(() => {
              const sheet = workbook.getWorksheet('Test Steps Log') || workbook.addWorksheet('Test Steps Log');
              appendRow(sheet, step, description, status);

              // Write the updated workbook back to the file
              return workbook.xlsx.writeFile(logFilePath);
            });
          } else {
            // Create a new workbook and add headers
            const sheet = workbook.addWorksheet('Test Steps Log');
            sheet.columns = [
              { header: 'Timestamp', key: 'timestamp', width: 25 },
              { header: 'Step', key: 'step', width: 30 },
              { header: 'Description', key: 'description', width: 50 },
              { header: 'Status', key: 'status', width: 10 }
            ];

            // Apply styles to the header
            sheet.getRow(1).eachCell(cell => {
              cell.font = { bold: true };
              cell.fill = {
                type: 'pattern',
                pattern: 'solid',
                fgColor: { argb: 'FF99CCFF' }, // Light blue fill
              };
            });

            appendRow(sheet, step, description, status); // Add the first row data

            // Write the workbook to file for the first time
            return workbook.xlsx.writeFile(logFilePath);
          }
        }
      });
    }
  }
};

// Helper function to append a row and apply color formatting for the status
function appendRow(sheet, step, description, status) {
  const timestamp = new Date().toLocaleString();
  const row = sheet.addRow({ timestamp, step, description, status });

  // Apply color formatting to the status column based on pass/fail
  const statusCell = row.getCell(4); // Column 4 is the Status column
  if (status === 'Passed') {
    statusCell.font = { color: { argb: 'FF00FF00' } }; // Green for passed
  } else if (status === 'Failed') {
    statusCell.font = { color: { argb: 'FFFF0000' } }; // Red for failed
  }

  row.commit(); // Commit the row to ensure it's properly written
}

Logging step: Step 1: Visit the application, description: Navigated to https://example.com, status: Passed
Logging step: Step 2: Perform an assertion, description: Verified the page contains "Example Domain" heading, status: Passed
Logging step: Step 3: Perform a failing assertion, description: Expected failure due to non-existent text, status: Failed
