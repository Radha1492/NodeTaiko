It sounds like your application may not be accepting the CSV file because of extra spaces or junk characters introduced during the writing process. This can happen due to improper formatting of the CSV file or encoding issues.

Hereâ€™s how you can avoid junk characters and extra spaces:
Trim Data Before Writing: Make sure that all data fields are properly trimmed to remove unnecessary spaces before writing to the CSV.

Escape Special Characters: Ensure that special characters such as commas, quotes, or line breaks in your data are escaped properly, as they may cause issues when processed by your application.

Set Proper Encoding: Ensure that the file is saved with proper encoding (UTF-8 without BOM).

Here is an improved version of your code that addresses these potential issues:

const fs = require('fs');
const path = require('path');

module.exports = (on, config) => {
  on('task', {
    writeToCSV({ filename, data }) {
      const csvFilePath = path.join(__dirname, filename);
      const headers = 'Email,FirstName,LastName,ClientName,GIT,AppName,Status\n';

      // Helper function to trim and escape CSV data
      const escapeCSV = (value) => {
        if (typeof value === 'string') {
          return `"${value.trim().replace(/"/g, '""')}"`;  // Escape quotes
        }
        return value;
      };

      // Check if the file exists. If not, create it with headers
      if (!fs.existsSync(csvFilePath)) {
        fs.writeFileSync(csvFilePath, headers);
      }

      // Prepare the data row by trimming and escaping fields
      const row = [
        escapeCSV(data.Email),
        escapeCSV(data.FirstName),
        escapeCSV(data.LastName),
        escapeCSV(data.ClientName),
        escapeCSV(data.GIT),
        escapeCSV(data.AppName),
        escapeCSV(data.Status)
      ].join(',') + '\n';

      // Append the cleaned data row to the CSV file
      fs.appendFileSync(csvFilePath, row);

      return null;
    }
  });
};


Explanation:
escapeCSV(): This function ensures that:

All string values are trimmed (removes leading/trailing spaces).
Any double quotes in the data are properly escaped (replacing " with "").
The data is enclosed in quotes to avoid any issues with special characters like commas.
Proper Formatting: We make sure that each row of data is correctly formatted as a comma-separated string with necessary escaping.

Appending Data: The formatted data row is appended to the CSV file without introducing unnecessary junk characters or spaces.

describe('Test to write unique emails for csvData_Testcase01', () => {
  it('should write 100 rows with unique emails for csvData_Testcase01 to the CSV file', function() {
    // Load the specific test case data from InputTestData.json
    cy.fixture('InputTestData').then((testData) => {
      const staticData = testData.csvData_Testcase01;  // Use data for csvData_Testcase01

      // Loop to generate 100 unique emails and write to CSV
      for (let i = 1; i <= 100; i++) {
        const row = {
          Email: `test${i}@example.com`,  // Dynamically generate unique email
          ...staticData                   // Merge the rest of the static data
        };

        // Write to CSV with cleaned data
        cy.task('writeToCSV', {
          filename: 'test-data.csv',
          data: row
        });
      }
    });
  });
});


Additional Tips:
Check CSV Encoding: Make sure your application expects a UTF-8 encoded file. The code above should generate the file with UTF-8 encoding.

Validating CSV: You can open the generated CSV in a text editor (like Notepad++) or a CSV validator to ensure there are no invisible characters.

This should resolve the issue of junk characters or extra spaces in your dynamically created CSV file. Let me know if this works!

@@@@@@@@@@@@@@@@@@@
Here is the complete and formatted code to dynamically generate a CSV file without junk characters or extra spaces. It includes a task in the config.js file and a Cypress test script that reads data from your InputTestData.json file under the fixture folder.

cypress.config.js
const fs = require('fs');
const path = require('path');

module.exports = (on, config) => {
  on('task', {
    writeToCSV({ filename, data }) {
      const csvFilePath = path.join(__dirname, filename);
      const headers = 'Email,FirstName,LastName,ClientName,GIT,AppName,Status\n';

      // Helper function to trim and escape CSV data
      const escapeCSV = (value) => {
        if (typeof value === 'string') {
          return `"${value.trim().replace(/"/g, '""')}"`;  // Escape quotes and trim spaces
        }
        return value;
      };

      // Check if the file exists. If not, create it with headers
      if (!fs.existsSync(csvFilePath)) {
        fs.writeFileSync(csvFilePath, headers);
      }

      // Prepare the data row by trimming and escaping fields
      const row = [
        escapeCSV(data.Email),
        escapeCSV(data.FirstName),
        escapeCSV(data.LastName),
        escapeCSV(data.ClientName),
        escapeCSV(data.GIT),
        escapeCSV(data.AppName),
        escapeCSV(data.Status)
      ].join(',') + '\n';

      // Append the cleaned data row to the CSV file
      fs.appendFileSync(csvFilePath, row);

      return null;
    }
  });
};

Cypress Test Script
This script reads the data from the InputTestData.json file in the fixture folder, generates 100 unique email rows, and writes them to a CSV file.

describe('Test to write unique emails for csvData_Testcase01', () => {
  it('should write 100 rows with unique emails for csvData_Testcase01 to the CSV file', function() {
    // Load the specific test case data from InputTestData.json
    cy.fixture('InputTestData').then((testData) => {
      const staticData = testData.csvData_Testcase01;  // Use data for csvData_Testcase01

      // Loop to generate 100 unique emails and write to CSV
      for (let i = 1; i <= 100; i++) {
        const row = {
          Email: `test${i}@example.com`,  // Dynamically generate unique email
          ...staticData                   // Merge the rest of the static data
        };

        // Write to CSV with cleaned data
        cy.task('writeToCSV', {
          filename: 'test-data.csv',
          data: row
        });
      }
    });
  });
});


Explanation:
Task in config.js:
escapeCSV() ensures that all values are properly trimmed and quotes are escaped to avoid issues with special characters.
The row is written in CSV format and appended to the file, ensuring no extra spaces or junk characters are added.
Cypress Test Script:
Reads the data from the JSON file (assuming you have a structure similar to this in your InputTestData.json file):

{
  "csvData_Testcase01": {
    "Email": "test1@example.com",
    "FirstName": "John",
    "LastName": "Doe",
    "ClientName": "ClientA",
    "GIT": "https://github.com/johndoe",
    "AppName": "App1",
    "Status": "Active"
  }
}


Generates 100 rows with unique email addresses (test1@example.com, test2@example.com, etc.) and writes them to the CSV.

Email,FirstName,LastName,ClientName,GIT,AppName,Status
"test1@example.com","John","Doe","ClientA","https://github.com/johndoe","App1","Active"
"test2@example.com","John","Doe","ClientA","https://github.com/johndoe","App1","Active"
"test3@example.com","John","Doe","ClientA","https://github.com/johndoe","App1","Active"
...


This should eliminate any junk characters and ensure your application accepts the CSV file correctly. Let me know if this works for you!

